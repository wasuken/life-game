(in-package :cl-user)
(defpackage life-game-test
  (:use :cl :prove :life-game))
(in-package #:life-game-test)

(plan 2)
(subtest "get-sel-around"
  (is (life-game:get-sel-around *table* 1 1)
	  '((0 . 0) (0 . 1) (0 . 2) (1 . 0) (1 . 2) (2 . 0) (2 . 1) (2 . 2)))
  (is (life-game:get-sel-around *table* 19 19)
	  '((18 . 18) (18 . 19) (19 . 18)))
  (diag "範囲外")
  (is (life-game:get-sel-around *table* 20 20)
	  nil))

(defparameter *test-table-1*
  '(("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "O" "O" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "O" "O" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "O" "O" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "O" "*" "*" "O" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "O" "*" "*" "O" "O" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "O" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "O" "O" "O" "O" "*" "O" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "O" "*" "O" "O" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")))

(defparameter *test-table-2*
  '(("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"

	 "*")
	("*" "*" "*" "*" "O" "O" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "O" "O" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "O" "O" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "O" "*" "*" "O" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "O" "*" "*" "O" "O" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "O" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "O" "O" "O" "O" "*" "O" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "O" "*" "O" "O" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")
	("*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*" "*"
	 "*")))
(subtest "get-sel-around"
  (life-game:check-table-sels-fate *test-table-1*)
  (diag "table内valueチェック")
  ;; 下記コードで止まるの謎過ぎる。
  ;; (print (mapcan #'(lambda (x) x) *test-table-1*))
  (let* ((result-list (mapcar #'(lambda (x)
								 (remove-if #'(lambda (y)
												(or (equal y *dead*)
													(equal y *live*)))
											x))
							 *test-table-1*))
		(cnt (length (remove-if #'(lambda (x)
									(null x))
								result-list))))
	(if (= 0 cnt)
		(ok "check-table-sels-fate正常値のみ")
		(fail (format nil "check-table-sels-fate異常値有 expected 0 to be ~A" cnt))))
  (diag "変換チェック")
  (is *test-table-1*
	  *test-table-2*))

(finalize)
